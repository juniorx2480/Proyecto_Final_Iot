#include <ESP8266WiFi.h>//moduloA
#include <PubSubClient.h>

// Configuración WiFi
const char* ssid = "FAMILIA RODRÍGUEZ 2.4"; // Nombre de tu red WiFi
const char* password = "Diana8a37";         // Contraseña de tu red WiFi

// Configuración del Broker MQTT
const char* mqtt_server = "192.168.0.19";   // Dirección IP del broker Mosquitto
const int mqtt_port = 1883;                 // Puerto del broker MQTT (1883 por defecto)

// Configuración del Cliente MQTT
WiFiClient espClient;
PubSubClient client(espClient);

// Tópico MQTT para publicar datos
const char* publish_topic = "sensor/luz";

// Pines del Sensor PIR y LDR
#define PIR_PIN 5    // GPIO5 (D1 en NodeMCU)
#define LDR_PIN A0   // Pin analógico donde está conectada la fotorresistencia

// Umbral de luz
int lightThreshold = 700; // Si la luz es menor a este valor, se considera poca luz

void setup_wifi() {
  delay(10);
  Serial.println("Conectando a WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nWiFi conectado.");
  Serial.print("Dirección IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Conectando al broker MQTT...");
    if (client.connect("ModuloA")) { // Identificación del cliente MQTT
      Serial.println("Conectado.");

      // Enviar mensaje al tópico indicando que se conectó correctamente
      const char* message = "Modulo A conectado correctamente";
      client.publish(publish_topic, message); // Publica en el tópico
      Serial.println(message); // Muestra el mensaje en la consola
    } else {
      Serial.print("Error al conectar (código: ");
      Serial.print(client.state());
      Serial.println("). Intentando de nuevo en 5 segundos...");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Configurar los pines
  pinMode(PIR_PIN, INPUT); // Configurar el pin del PIR como entrada
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  // Leer el estado del sensor PIR
  int pirState = digitalRead(PIR_PIN);
  if (pirState == HIGH) { // Si detecta movimiento
    Serial.println("Movimiento detectado!");

    // Leer el valor de la fotorresistencia
    int lightValue = analogRead(LDR_PIN);
    Serial.print("Nivel de luz: ");
    Serial.println(lightValue);

    // Evaluar si la luz es baja
    if (lightValue < lightThreshold) {
      const char* message = "Se detecto movimiento, luz baja, encender led";
      client.publish(publish_topic, message); // Publica en el tópico
      Serial.println("Luz baja detectada. Enviando mensaje para encender el LED.");
    } else {
      const char* message = "Se detecto movimiento, luz suficiente , apagar led";
      client.publish(publish_topic, message); // Publica en el tópico
      Serial.println("Luz suficiente detectada. LED no será encendido.");
    }
    delay(10000); // Evita múltiples detecciones consecutivas del PIR
  }
  delay(400); // Pequeño retardo para e vitar lecturas continuas
}
